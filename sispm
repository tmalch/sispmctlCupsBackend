#!/usr/bin/python
# -*- coding: utf-8 -*-
# cups backend to switch on GEMBIRD SIS-PM outlet before printing and switch off after some time
# based on mailto backend by Robert Sander <robert.sander@epigenomics.com>
# (C) 2015 Thomas Malcher
# Released under MIT Licence
# NO WARRANTY AT ALL
#
import sys, os, subprocess
import time
import signal
import tempfile

pidfile = "/run/sispm_turnoff.pid"
sispmctl_binary = "/usr/bin/sispmctl"
backend_path = os.path.dirname(os.path.realpath(__file__))
turnoff_script = backend_path+"/sispm_turnoff"

def error(message):
    sys.stderr.write("ERROR: sispm backend - "+message+"\n")
def debug(message):
    return
    sys.stderr.write("DEBUG: sispm backend - "+message+"\n")

try:
	if not os.path.exists(sispmctl_binary):
			error("sispmctl binary does not exist: "+sispmctl_binary)
			sys.exit(1)

	argc = len(sys.argv)
	debug("sispm argv[%s] = '%s'" % (argc, "', '".join(sys.argv)))
	if argc == 1:
		  print("network sispm \"Unknown\" \"SISPM auto power on\"")
		  sys.exit(0)

	if argc < 6 or argc > 7:
		  error("wrong argument number: sispm job-id user title copies options [file]")
		  sys.exit(1)

	jobid = sys.argv[1]
	user = sys.argv[2]
	title = sys.argv[3]
	copies = sys.argv[4]
	opts = sys.argv[5]

	deviceuri = os.environ['DEVICE_URI']
	debug("Deviceuri: " + deviceuri)
	if argc == 7:
		  infilename = sys.argv[6]
		  debug("file is "+infilename)
	else:
			with tempfile.NamedTemporaryFile(delete=False) as infile:
				infilename = infile.name
				infile.write(sys.stdin.read())
			debug("copied stdin to tmp file " + infilename)
	#decode outlet number
	switchnr = None
	if type(deviceuri) == str and deviceuri.startswith("sispm://"):
		  nested_uri_idx = deviceuri.find("/", len("sispm://"))
		  if nested_uri_idx < 0:
		    error("wrong URI format, could not find nested original URI "+deviceuri)
		    sys.exit(1)
		  switchnr = str(int(deviceuri[len("sispm://"):nested_uri_idx]))
		  deviceuri = deviceuri[nested_uri_idx+1:]
		  debug("decoded original deviceuri " + deviceuri)
	else:
		  debug("search for number of outlet in options")
		  for opt in opts.split(" "):
		    if opt[:9] == "switchnr=":
			  	switchnr = str(int(opt[9:]))
			  	debug("switch outlet number " + switchnr)
	if not switchnr:
		error("was not able to decode outlet number")
		sys.exit(1)
	#check if turnoff process is already running, if so stop it 
	if os.path.exists(pidfile):
		debug("turnoff process already running -> stop it")
		try:
			with open(pidfile,"r") as f:
				tpid = f.readline(10)
			os.kill(int(tpid), signal.SIGTERM)
		except Exception as e:
			os.remove(pidfile)
			error("ERROR was not able to kill turnoff process: "+str(e))
	#turn on the outlet for the printer
	subprocess.check_call([sispmctl_binary,"-o",str(switchnr)])
	debug("outlet number "+str(switchnr)+" switched on")
	time.sleep(10)
	
	#call the original backend
	i = deviceuri.find(":")
	backend = backend_path+"/"+deviceuri[:i]
	debug("orig backend " + backend)
	os.environ['DEVICE_URI'] = deviceuri
	title = "\""+title+"\""
	options = "\""+opts+"\""
	orig_backend_command = [backend,jobid,user,title,copies,options,infilename]
	debug("execute backend %s" % " ".join(orig_backend_command))
	subprocess.check_call(orig_backend_command)
	
	#start turnoff process
	subprocess.check_call([turnoff_script,str(switchnr)])
	debug("turnoff started")
	sys.exit(0)
except Exception as e:
	error(str(type(e))+"::"+str(e))
	sys.exit(1)




